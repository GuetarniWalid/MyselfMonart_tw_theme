{% comment %} 
  Renders the part responsible for filling the window.paintingOptions object
  Accepts: 
  - type: {String}
  - option: {Object} 
{% endcomment %}

window.paintingOptions['{{ type }}'].push({
  name: {{ option.name | json }},
  key: {{ option.key | json }},
  type: {{ option.type | json }},
  price: getOptionPrice({{ option | json }}, {{ option.variant.value | json }}),
  availableOn: getAvailability({{ option | json }}, {{ option.variant.value.product.metafields.painting_option.availability.value | json }}),
  variantId: {{ option.variant.value.id | json }},
  image: {
    src: {% if option.media.value.src %}{{ option.media.value.src | image_url: width: 720 | json }}{% else %}null{% endif %},
    alt: {{ option.media.value.alt | json | default: null }},
  },
  radio: {
    image: {
      src: {% if option.radio.value.media.value.src %}{{ option.radio.value.media.value.src | image_url: width: 200 | json }}{% else %}null{% endif %},
      alt: {{ option.radio.value.media.value.alt | json | default: null }},
    },
    container: {
      title: {{ option.radio.value.container.value.title | json | default: null }},
    }
  },
  popup: {
    title: {{ option.popup.value.title | json | default: null }},
    description: {{ option.popup.value.description | json | default: null }},
    image: {
      src: {% if option.popup.value.media.value.src %}{{ option.popup.value.media.value.src | image_url: width: 400 | json }}{% else %}null{% endif %},
      alt: {{ option.popup.value.media.value.alt | json | default: null }},
    },
    youtubeVideoId: {{ option.popup.value.youtube_video_id | json | default: null }},
  }
});


function getOptionPrice(option, variantLinked) {
  switch (option.type) {
    case 'size':
      return getSizeOptionPrice(option);
      break;
    case 'matter':
      return getMatterOptionPrice(option);
      break;
    case 'thickness':
      return getThicknessOptionPrice(option);
      break;
    case 'border':
      return getBorderOptionPrice(option);
      break;
    case 'shine':
      return getShineOptionPrice(option);
      break;
    default:
      return getOthersOptionPrice(variantLinked);
  }
}

function getSizeOptionPrice(option) {
  const sizeOption = window.variants.find(variant => variant.option1 === option.name);
  return sizeOption ? Number(sizeOption.price) / 100 : null;
}

function getMatterOptionPrice(option) {
  const matterOption = window.variants.find(variant => variant.option2 === option.name);
  const matterPrice = Number(matterOption.price)
  const lowerPrice = Number(window.variants[0].price)
  return (matterPrice - lowerPrice) / 100;
}

function getThicknessOptionPrice(option) {
  const variant1 = window.variants.find(variant => variant.option3.includes('/'));
  const thickness1 = variant1.option3.split('/')[0];
  const border1 = variant1.option3.split('/')[1];
  const price1 = variant1.price

  const variant2 = window.variants.find(variant => {
    const [thickness, border] = variant.option3.split('/');
    return thickness === option.name && border === border1
  });
  const price2 = variant2.price

  const higherPrice = Math.max(price1, price2);
  const lowerPrice = Math.min(price1, price2);
  const priceDifference = (higherPrice - lowerPrice) / 100;

  return priceDifference;
}

function getBorderOptionPrice(option) {
  const variant1 = window.variants.find(variant => variant.option3.includes('/'));
  const thickness1 = variant1.option3.split('/')[0];
  const border1 = variant1.option3.split('/')[1];
  const price1 = variant1.price

  const variant2 = window.variants.find(variant => {
    const [thickness, border] = variant.option3.split('/');
    return thickness === thickness1 && border === option.name
  });
  const price2 = variant2.price

  const higherPrice = Math.max(price1, price2);
  const lowerPrice = Math.min(price1, price2);
  const priceDifference = (higherPrice - lowerPrice) / 100;
  
  return priceDifference;
}

function getShineOptionPrice(option) {
  const variant1 = window.variants.find(variant => !variant.option3.includes('/') && variant.option3 !== 'Null');
  const shine1 = variant1.option3
  const price1 = variant1.price

  const variant2 = window.variants.find(variant => variant.option3 === option.name);
  const shine2 = variant2.option3
  const price2 = variant2.price

  const higherPrice = Math.max(price1, price2);
  const lowerPrice = Math.min(price1, price2);
  const priceDifference = (higherPrice - lowerPrice) / 100;
  
  return priceDifference;
}

function getOthersOptionPrice(variantLinked) {
  if (!variantLinked) {
    return 0;
  }
  return variantLinked.price / 100;
}

function getAvailability(option, availability) {
  if (availability) return availability;
  const variantsContainingOption = window.variants.filter(variant => variant.option3?.includes(option.name));
  if(!variantsContainingOption.length) return null;

  const couplesSizeMatter = variantsContainingOption.map(variant => {
    const option1 = window.paintingOptions.size.find(option => option.name === variant.option1);
    const option2 = window.paintingOptions.matter.find(option => option.name === variant.option2);
    return `${option1.key}/${option2.key}`
    });
  const couplesSizeMatterWithoutDuplicates = [...new Set(couplesSizeMatter)];
  
  return couplesSizeMatterWithoutDuplicates;
}

