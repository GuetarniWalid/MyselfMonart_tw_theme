class Uploader extends HTMLElement {
  URLBackend = 'https://api.myselfmonart.com';
  errorMessages = {
    wrongType: "{{ 'components.uploader.errors.wrongType' | t }}",
    tooLarge: "{{ 'components.uploader.errors.tooLarge' | t }}",
    serverError: "{{ 'components.uploader.errors.serverError' | t }}",
  };

  constructor() {
    super();
    this.fileInput = this.querySelector('input[type="file"]');
    this.spinner = this.querySelector('.spinner');
    this.buttonText = this.querySelector('label span');
    this.imgWrapper = this.querySelector('.image-wrapper');
    this.productForm = document.querySelector('.product-form')
  }

  connectedCallback() {
    this.hideCart()
    this.fileInput.addEventListener('change', async () => {
      this.showSpinner();
      const file = this.fileInput.files[0];
      const {urlToImg, success} = await this.sendFileToServer(file);
      this.hideSpinner();
      if (success) {
        this.showNewImage(urlToImg);
        this.addImgUrlInCartProperties(urlToImg);
        this.showCart()
        this.addToCart()
      }
    });
  }

  disconnectedCallback() {
    clearTimeout(this.timer);
  }

  showSpinner() {
    this.spinner.classList.remove('hidden');
    this.buttonText.classList.add('hidden');
  }

  hideSpinner() {
    this.spinner.classList.add('hidden');
    this.buttonText.classList.remove('hidden');
  }

  showError(message) {
    const event = new CustomEvent('new-error', {
      detail: { message }
    });
    document.body.dispatchEvent(event);
  }

  showNewImage(imageUrl) {
    const img = this.imgWrapper.querySelector('img');
    if (img) {
      img.src = imageUrl;
    } else {
      const img = document.createElement('img');
      img.src = imageUrl;
      this.imgWrapper.appendChild(img);
    }
  }

  hideCart() {
    this.productForm.classList.add('hidden');
  }

  showCart() {
    this.productForm.classList.remove('hidden');
  }

  addImgUrlInCartProperties(imgUrl) {
    const cartForm = document.querySelector('.product-form form');
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = 'properties[_client_photo]';
    input.value = imgUrl;
    cartForm.appendChild(input);
  }

  addToCart() {
    const addCartButton = this.productForm.querySelector('button[name="add"]')
    setTimeout(() => {
      addCartButton.click()
    }, 2000)
  }

  async sendFileToServer(file) {
    try {
      //get url to s3
      const response = await fetch(`${this.URLBackend}/s3/credential`);
      const { url } = await response.json();

      //put image to s3
      const response2 = await fetch(url, {
        method: 'PUT',
        body: file,
      });
      if (!response.ok) throw new Error(this.errorMessages.serverError);
      else return {
        urlToImg: url.split('?')[0],
        success: true,
      };
    } catch(e) {
      this.showError(this.errorMessages.serverError);
      return {
        urlToImg: '',
        success: false,
      };
    }
  }
}

customElements.define('component-uploader', Uploader);
